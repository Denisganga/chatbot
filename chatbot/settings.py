"""
Django settings for chatbot project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from pydantic import BaseModel, field_validator
import typing as t
from dotenv import dotenv_values
import re

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x%-@86m9a_rc2duko&6y-z&8f$07f34lepoc$7948!8hn-s12d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chatbot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


import os
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

class Config(BaseModel):
    """Implements a granular way of taking email variables and genai-api-key from environment"""
    email_backend: t.Optional[str] = 'django.core.mail.backends.smtp.EmailBackend'
    email_host:t.Optional[str] = 'smtp.gmail.com'
    email_port: t.Optional[int] = 587
    email_use_tls: t.Optional[bool] = True
    email_host_user: str
    email_host_password: str
    genai_api_key:str

    @field_validator('email_host')
    def validate_email_host(value) -> str:
        if not re.match(r"^[\w_-]+\.[\w_-]+\.\w{2,7}$", value):
            raise ValueError(
                f"Invalide email_host - {value} "
            )
        return value

    @field_validator('email_host_user')
    def validate_email_host_user(value) -> str:
        if not re.match(r'^[\w_-]+@[\w_-]+\.\w{2,7}$', value):
            raise ValueError(
                f"Invalid email_host_user - {value}"
            )
        return value
    
    @field_validator('genai_api_key')
    def validate_genai_api_key(value) -> str:
        if not re.match(r"[\w_-]{35,45}", value):
            raise ValueError(
                f'Invalid genai_api_key - {value}'
            )
        return value


dotenv_path = '.env'

CONFIG = Config(**dotenv_values(dotenv_path))
"""Configurations loaded from .env file"""

EMAIL_BACKEND = CONFIG.email_backend
EMAIL_HOST = CONFIG.email_host
EMAIL_PORT = CONFIG.email_port
EMAIL_USE_TLS = CONFIG.email_use_tls
EMAIL_HOST_USER = CONFIG.email_host_user
EMAIL_HOST_PASSWORD = CONFIG.email_host_password